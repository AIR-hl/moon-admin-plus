<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mysystem.admin.dao.DeptDao">

    <resultMap id="DeptComVO" type="com.mysystem.admin.dto.DeptComDto">
        <result property="deptId" column="dept_id"></result>
        <result property="parentId" column="parent_id"></result>
        <result property="deptName" column="dept_name"></result>
        <result property="status" column="status"></result>
        <result property="email" column="email"></result>
        <result property="phone" column="phone"></result>
        <result property="address" column="address"></result>
        <result property="createTime" column="create_time"></result>
        <result property="updateTime" column="update_time"></result>
    </resultMap>

    <sql id="selectDeptVo">
        select d.dept_id, d.parent_id, d.dept_name, d.email, d.phone,d.status
             ,d.address,d.create_time,d.update_time
        from com_dept d
    </sql>

    <select id="getDeptAll" parameterType="com.mysystem.admin.dto.DeptComDto" resultMap="DeptComVO">
        select d.dept_id, d.parent_id, d.dept_name, d.email, d.phone,d.status,d.address,d.create_time,d.update_time
        from com_dept d
    </select>

    <select id="getFuzzyDept" resultMap="DeptComVO">
        SELECT dept_id,parent_id,dept_name,email,phone,status,create_time,update_time FROM my_dept
        <where>
            <if test="comName!=''">
                dept_id IN (
                    select t1.dept_id from com_dept t1,com_dept t2
                    where t1.parent_id = t2.dept_id and t2.dept_name = #{comName})
            </if>
        </where>
    </select>

    <select id="buildAll" resultType="com.mysystem.admin.dto.DeptDto">
        select d.dept_id as id,d.parent_id,d.dept_name as title,d.email as email,d.phone as phone,d.status as status
            from com_dept d
        <where>
            <!-- 数据范围过滤 -->
            ${params.dataScope}
        </where>
    </select>

    <resultMap id="deptMap" type="com.mysystem.admin.entity.MyDept">
        <result property="deptId" column="dept_id"></result>
        <result property="deptName" column="dept_name"></result>
        <result property="status" column="status"></result>
        <result property="parentId" column="parent_id"></result>
        <result property="phone" column="phone"></result>
        <result property="email" column="email"></result>
        <result property="address" column="address"></result>
        <result property="createTime" column="create_time"></result>
        <result property="updateTime" column="update_time"></result>
    </resultMap>

    <select id="selectDeptById" parameterType="integer" resultMap="deptMap">
		select d.dept_id, d.parent_id, d.email,d.phone,d.dept_name, d.status,d.address,d.create_time,d.update_time
		from my_dept d
		where d.dept_id = #{deptId}
	</select>

    <select id="checkDeptNameUnique" parameterType="com.mysystem.admin.entity.MyDept" resultMap="deptMap">
        select * from my_dept
        where dept_name= #{deptName} and parent_id
            in(select com_id from my_com where com_id = #{parentId})
    </select>

    <select id="selectChildrenDeptById" parameterType="integer" resultType="com.mysystem.admin.entity.MyDept">
		select * from my_dept where find_in_set(#{id}, ancestors)
	</select>

    <select id="selectRoleDeptTree" parameterType="integer" resultType="com.mysystem.admin.dto.DeptDto">
		select d.dept_id as id,d.parent_id,d.dept_name as title
		from my_dept d
			left join my_role_dept rd on d.dept_id = rd.dept_id
		where rd.role_id = #{id}
		order by d.parent_id
	</select>

    <update id="updateDeptChildren" parameterType="java.util.List">
        update my_dept set ancestors =
        <foreach collection="depts" item="item" index="index"
                 separator=" " open="case dept_id" close="end">
            when #{item.id} then #{item.ancestors}
        </foreach>
        where id in
        <foreach collection="depts" item="item" index="index"
                 separator="," open="(" close=")">
            #{item.id}
        </foreach>
    </update>

    <update id="updateDept" parameterType="com.mysystem.admin.entity.MyDept">
        update my_dept d
        <set>
            <if test="parentId != null and parentId != 0">
                parent_id = #{parentId},
            </if>
            <if test="deptName != null and deptName != ''">
                 dept_name = #{deptName},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
            <if test="email != null and email != ''">
                email = #{email},
            </if>
            <if test="phone != null and phone != ''">
                phone = #{phone},
            </if>
            <if test="address != null">
                address = #{address},
            </if>
        </set>
        where d.dept_id = #{deptId}
    </update>

    <update id="updateDeptStatus" parameterType="com.mysystem.admin.entity.MyDept">
        update my_dept
        <set>
            <if test="status != null and status != ''">
                status = #{status},
            </if>
        </set>
        where dept_id = #{deptId}
    </update>

    <select id="selectNormalChildrenDeptById" parameterType="integer" resultType="int">
		select count(*) from my_dept where status = 1 and find_in_set(#{dept_id}, ancestors)
	</select>

    <select id="selectDeptCount" parameterType="com.mysystem.admin.entity.MyDept" resultType="int">
        select count(1) from my_dept
        <where>
            <if test="deptId != null and deptId != 0"> and dept_id = #{deptId} </if>
            <if test="parentId != null and parentId != 0"> and parent_id = #{parentId} </if>
        </where>
    </select>

    <select id="checkDeptExistUser" resultType="int">
        select count(1) from my_user where dept_id = #{deptId}
	</select>

    <delete id="deleteDeptById" parameterType="integer">
		delete from my_dept where dept_id =#{deptId}
	</delete>
</mapper>
